variables:
  BUILD_IMAGE: $CI_REGISTRY/$TEMPLATE_PATH/sphinx-build
  # If you want to use your own image: comment the previous line, uncomment the next line
  # BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build
  GIT_DEPTH: 0
  TEMPLATE_PATH: epj/documentation-template

default:
  image: $BUILD_IMAGE

stages:
  - prebuild
  - build
  - test
  - build_tags
  - deploy

###############################################################################
# Build Building Docker Image
###############################################################################
build_image:
  stage: prebuild
  image: docker:latest
  services:
    - docker:stable-dind
  rules:
    if: $CI_PROJECT_PATH == $TEMPLATE_PATH && $CI_COMMIT_REF_SLUG == "master"
    # If you want to use your own image: comment the previous line, uncomment the next line
    # - if: $CI_COMMIT_REF_NAME == "master"
    changes:
      - Dockerfile.build
      - .dockerignore
      - .gitlab-ci.yml
      - requirements.txt
      - conf.py
  - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
    changes:
      - Dockerfile.build
      - .dockerignore
      - .gitlab-ci.yml
      - requirements.txt
      - conf.py
    variables:
      BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --tag $BUILD_IMAGE -f  Dockerfile.build .
    - docker push $BUILD_IMAGE

###############################################################################
# Build Latest Documentation
###############################################################################

build_latest_html:
  stage: build
  script:
    - make html
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _build/html

build_latest_pdf:
  stage: build
  script:
    - make latexpdf
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _build/latex/*.pdf

build_latest_epub:
  stage: build
  script:
    - make epub
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _build/epub/*.epub

###############################################################################
# Tests
###############################################################################

## Note: Spelling disabled, only works for english
#test_latest_spelling:
#  stage: test
#  script:
#    - make spelling
#  allow_failure: true

## Note: Link checking disabled, we have internal / not yet available links
#test_latest_links:
#  stage: test
#  script:
#    - make linkcheck
#  allow_failure: true

###############################################################################
# Build Documentation for All Tags
###############################################################################

build_tags_html:
  stage: build_tags
  script:
    - make MODE=html versions
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _versions/*/html

build_tags_pdf:
  stage: build_tags
  script:
    - make MODE=latexpdf versions
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _versions/*/latex/*.pdf

build_tags_epub:
  stage: build_tags
  script:
    - make MODE=epub versions
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^docker\/.*$/
      variables:
        BUILD_IMAGE: $CI_REGISTRY_IMAGE/sphinx-build:$CI_COMMIT_REF_SLUG
    - when: on_success
  artifacts:
    paths:
      - _versions/*/epub/*.epub

###############################################################################
# Publish Gitlab Pages
###############################################################################
pages:
  stage: deploy
  script:
    - mv _build/html/ public
    - mv _build/epub/*.epub public/_static/
    - mv _build/latex/*.pdf public/_static/
    - |
        shopt -s dotglob
        mkdir -p _versions
        for tag in $(git tag); do
          mkdir -p _versions/$tag/html/_static/
          mv _versions/$tag/epub/*.epub _versions/$tag/html/_static/
          mv _versions/$tag/latex/*.pdf _versions/$tag/html/_static/
          mv _versions/$tag/html/* _versions/$tag/
          rmdir _versions/$tag/html
        done
    - mv _versions public/
  only:
    - master
    - tags
  artifacts:
    paths:
      - public
